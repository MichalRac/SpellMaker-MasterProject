//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Configs/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""MainMap"",
            ""id"": ""430f07af-6980-41f2-948b-c4bcf35c036d"",
            ""actions"": [
                {
                    ""name"": ""PreviousAndNext"",
                    ""type"": ""Button"",
                    ""id"": ""1b418f40-b2b0-4945-ab7e-39b9d0b98077"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""86b68bb8-ffc5-4469-b33d-5cbef13180c8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PointerPos"",
                    ""type"": ""Value"",
                    ""id"": ""29b0a740-4788-4fa4-9ceb-c2d0be893d27"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Mouse"",
                    ""type"": ""Button"",
                    ""id"": ""05103f8c-bbce-4ff8-9fc1-b2fb6f92a12d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""AD"",
                    ""id"": ""5c2fbc59-b1f9-449f-960a-bac6acb0e4ac"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PreviousAndNext"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""a0486ed5-3fa2-4014-b01c-f746f43a45f1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MainControlScheme"",
                    ""action"": ""PreviousAndNext"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""0abd107d-7c30-428e-89ad-0873650aa8c9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MainControlScheme"",
                    ""action"": ""PreviousAndNext"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""LeftRight"",
                    ""id"": ""5ee36490-1807-456a-bd8b-2d1f312579dc"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PreviousAndNext"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""06311d33-680c-425f-8542-2d9b0060d90a"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MainControlScheme"",
                    ""action"": ""PreviousAndNext"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""91070eb9-1a65-43f1-b46a-9831856879d6"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MainControlScheme"",
                    ""action"": ""PreviousAndNext"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d941f804-4cef-49ab-bc34-752b0a3f0592"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""516b2613-fc44-4826-8933-40335b18f43c"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerPos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca0a1eec-b051-4a31-9db8-ce076b8865fb"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""MainControlScheme"",
            ""bindingGroup"": ""MainControlScheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // MainMap
        m_MainMap = asset.FindActionMap("MainMap", throwIfNotFound: true);
        m_MainMap_PreviousAndNext = m_MainMap.FindAction("PreviousAndNext", throwIfNotFound: true);
        m_MainMap_Confirm = m_MainMap.FindAction("Confirm", throwIfNotFound: true);
        m_MainMap_PointerPos = m_MainMap.FindAction("PointerPos", throwIfNotFound: true);
        m_MainMap_Mouse = m_MainMap.FindAction("Mouse", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainMap
    private readonly InputActionMap m_MainMap;
    private IMainMapActions m_MainMapActionsCallbackInterface;
    private readonly InputAction m_MainMap_PreviousAndNext;
    private readonly InputAction m_MainMap_Confirm;
    private readonly InputAction m_MainMap_PointerPos;
    private readonly InputAction m_MainMap_Mouse;
    public struct MainMapActions
    {
        private @InputActions m_Wrapper;
        public MainMapActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PreviousAndNext => m_Wrapper.m_MainMap_PreviousAndNext;
        public InputAction @Confirm => m_Wrapper.m_MainMap_Confirm;
        public InputAction @PointerPos => m_Wrapper.m_MainMap_PointerPos;
        public InputAction @Mouse => m_Wrapper.m_MainMap_Mouse;
        public InputActionMap Get() { return m_Wrapper.m_MainMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainMapActions set) { return set.Get(); }
        public void SetCallbacks(IMainMapActions instance)
        {
            if (m_Wrapper.m_MainMapActionsCallbackInterface != null)
            {
                @PreviousAndNext.started -= m_Wrapper.m_MainMapActionsCallbackInterface.OnPreviousAndNext;
                @PreviousAndNext.performed -= m_Wrapper.m_MainMapActionsCallbackInterface.OnPreviousAndNext;
                @PreviousAndNext.canceled -= m_Wrapper.m_MainMapActionsCallbackInterface.OnPreviousAndNext;
                @Confirm.started -= m_Wrapper.m_MainMapActionsCallbackInterface.OnConfirm;
                @Confirm.performed -= m_Wrapper.m_MainMapActionsCallbackInterface.OnConfirm;
                @Confirm.canceled -= m_Wrapper.m_MainMapActionsCallbackInterface.OnConfirm;
                @PointerPos.started -= m_Wrapper.m_MainMapActionsCallbackInterface.OnPointerPos;
                @PointerPos.performed -= m_Wrapper.m_MainMapActionsCallbackInterface.OnPointerPos;
                @PointerPos.canceled -= m_Wrapper.m_MainMapActionsCallbackInterface.OnPointerPos;
                @Mouse.started -= m_Wrapper.m_MainMapActionsCallbackInterface.OnMouse;
                @Mouse.performed -= m_Wrapper.m_MainMapActionsCallbackInterface.OnMouse;
                @Mouse.canceled -= m_Wrapper.m_MainMapActionsCallbackInterface.OnMouse;
            }
            m_Wrapper.m_MainMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PreviousAndNext.started += instance.OnPreviousAndNext;
                @PreviousAndNext.performed += instance.OnPreviousAndNext;
                @PreviousAndNext.canceled += instance.OnPreviousAndNext;
                @Confirm.started += instance.OnConfirm;
                @Confirm.performed += instance.OnConfirm;
                @Confirm.canceled += instance.OnConfirm;
                @PointerPos.started += instance.OnPointerPos;
                @PointerPos.performed += instance.OnPointerPos;
                @PointerPos.canceled += instance.OnPointerPos;
                @Mouse.started += instance.OnMouse;
                @Mouse.performed += instance.OnMouse;
                @Mouse.canceled += instance.OnMouse;
            }
        }
    }
    public MainMapActions @MainMap => new MainMapActions(this);
    private int m_MainControlSchemeSchemeIndex = -1;
    public InputControlScheme MainControlSchemeScheme
    {
        get
        {
            if (m_MainControlSchemeSchemeIndex == -1) m_MainControlSchemeSchemeIndex = asset.FindControlSchemeIndex("MainControlScheme");
            return asset.controlSchemes[m_MainControlSchemeSchemeIndex];
        }
    }
    public interface IMainMapActions
    {
        void OnPreviousAndNext(InputAction.CallbackContext context);
        void OnConfirm(InputAction.CallbackContext context);
        void OnPointerPos(InputAction.CallbackContext context);
        void OnMouse(InputAction.CallbackContext context);
    }
}
